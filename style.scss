@import "code";
@import "common";
@import "gridprop";
@import "var";

// We can exclude or include .scss during imports.

// Our browser don't understand Sass/Scss, it converts it to low level basic css, then apply styles.

// There are two syntaxes available for Sass. The first, known as SCSS (Sassy CSS) and used throughout this reference, is an extension of the syntax of CSS. This means that every valid CSS stylesheet is a valid SCSS file with the same meaning. This syntax is enhanced with the Sass features described below. Files using this syntax have the .scss extension.

// The second and older syntax, known as the indented syntax (or sometimes just “Sass”), provides a more concise way of writing CSS. It uses indentation rather than brackets to indicate nesting of selectors, and newlines rather than semicolons to separate properties. Files using this syntax have the .sass extension.

// SASS/SCSS extension does not compile commets into style.css

/*

1. Operators ==> +, -, *, /, %
2. Variables ==> Syntax ==> $var_name
3. Nesting ==> div{ h1{} }
4. Mixing = mixing is like a function, we define a reusable piece of code inside a block, and can aceess it anywhere inside our scss file
5. Partials = We can divide our sass code into multiple files, and then import it wherever we want. Partial file name must start with _, so our SCSS compiler won't compile this file.

*/

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.main {
  height: 100vh;
  width: 100%;
  @include gridprop();

  // Variables
  background-color: $primary-color-1;

  //   Nesting
  //   We can do as many level nesting we want.
  h1 {
    @include code;
    //   Operators
    font-size: 1rem + 2rem;

    // We can set hover insde that element itself.
    // & = element we are inside of.
    &:hover {
      color: red;
    }

    &::after {
      content: " Tutorial";
    }
  }

  p {
    @include commonCode(0.5rem);
  }

  //   More nesting
  div {
    h3 {
      font-size: 2rem;
      color: rgb(51, 0, 255);
    }
  }
}
